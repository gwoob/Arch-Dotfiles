# -*- after-save-hook: (org-babel-tangle); before-save-hook: (delete-trailing-whitespace)-*-
#+PROPERTY: header-args:emacs-lisp :exports code :results none :tangle init.el
#+TITLE: My init.el Configuration in Org-mode
#+AUTHOR: Benjamin Carpenter

* Melpa

#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/"))
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
(package-initialize)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package no-littering
  :ensure t)
#+END_SRC

* Upgrade Built-In Packages

#+BEGIN_SRC emacs-lisp
(setq package-install-upgrade-built-in t)
#+END_SRC

* Save Customizations In Another File

#+BEGIN_SRC emacs-lisp
;;(setq custom-file (concat user-emacs-directory "custom.el"))
;;(when (file-exists-p custom-file)
;;  (load custom-file 'noerror))
#+END_SRC

* Disable Annoying Automatic Backups

#+BEGIN_SRC emacs-lisp
;;(setq make-backup-files nil)
#+END_SRC

* Modus Theme

#+BEGIN_SRC emacs-lisp
(load-theme 'modus-vivendi t)
#+END_SRC

* Better Scrolling

#+BEGIN_SRC emacs-lisp
;; Vertical Scroll
(setq scroll-step 1)
(setq scroll-margin 1)
(setq scroll-conservatively 101)
(setq scroll-up-aggressively 0.01)
(setq scroll-down-aggressively 0.01)
(setq auto-window-vscroll nil)
(setq fast-but-imprecise-scrolling nil)
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))
(setq mouse-wheel-progressive-speed nil)
;; Horizontal Scroll
(setq hscroll-step 1)
(setq hscroll-margin 1)
#+END_SRC

* Declutter

#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)
(scroll-bar-mode -1)
(tool-bar-mode -1)
(menu-bar-mode -1)
#+END_SRC

* Relative Line Numbers

#+BEGIN_SRC emacs-lisp
(global-display-line-numbers-mode 1)
(setq display-line-numbers-type 'relative)
#+END_SRC

* Icomplete and Fido Mode

#+BEGIN_SRC emacs-lisp
(icomplete-vertical-mode 1)
(fido-vertical-mode 1)
#+END_SRC

* Font

#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(font . "firacodenerdfont" ))
(set-face-attribute 'default t :font "firacodenerdfont" )
#+END_SRC

* Third-Party Packages

** Emacs Dashboard

#+BEGIN_SRC emacs-lisp
;; use-package with package.el:
(use-package dashboard
  :ensure t
  :config
  (dashboard-setup-startup-hook))

(setq dashboard-center-content t)

;; this doesnt work without a manual refresh, needs fixed
(setq dashboard-vertically-center-content t)

(setq dashboard-startupify-list '(dashboard-insert-banner
                                  dashboard-insert-newline
				  dashboard-insert-init-info
                                  dashboard-insert-newline
                                  dashboard-insert-items))
(setq initial-buffer-choice (lambda () (get-buffer-create dashboard-buffer-name)))
#+END_SRC

** Magit

#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t)
#+END_SRC

** Meow

*** Configuration

#+BEGIN_SRC emacs-lisp
(use-package meow
  :ensure t)
(defun meow-setup ()
  (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
  (meow-motion-overwrite-define-key
   '("j" . meow-next)
   '("k" . meow-prev)
   '("<escape>" . ignore))
  (meow-leader-define-key
   ;; SPC j/k will run the original command in MOTION state.
   '("j" . "H-j")
   '("k" . "H-k")
   ;; Use SPC (0-9) for digit arguments.
   '("1" . meow-digit-argument)
   '("2" . meow-digit-argument)
   '("3" . meow-digit-argument)
   '("4" . meow-digit-argument)
   '("5" . meow-digit-argument)
   '("6" . meow-digit-argument)
   '("7" . meow-digit-argument)
   '("8" . meow-digit-argument)
   '("9" . meow-digit-argument)
   '("0" . meow-digit-argument)
   '("/" . meow-keypad-describe-key)
   '("?" . meow-cheatsheet))
  (meow-normal-define-key
   '("0" . meow-expand-0)
   '("9" . meow-expand-9)
   '("8" . meow-expand-8)
   '("7" . meow-expand-7)
   '("6" . meow-expand-6)
   '("5" . meow-expand-5)
   '("4" . meow-expand-4)
   '("3" . meow-expand-3)
   '("2" . meow-expand-2)
   '("1" . meow-expand-1)
   '("-" . negative-argument)
   '(";" . meow-reverse)
   '("," . meow-inner-of-thing)
   '("." . meow-bounds-of-thing)
   '("[" . meow-beginning-of-thing)
   '("]" . meow-end-of-thing)
   '("a" . meow-append)
   '("A" . meow-open-below)
   '("b" . meow-back-word)
   '("B" . meow-back-symbol)
   '("c" . meow-change)
   '("d" . meow-delete)
   '("D" . meow-backward-delete)
   '("e" . meow-next-word)
   '("E" . meow-next-symbol)
   '("f" . meow-find)
   '("g" . meow-cancel-selection)
   '("G" . meow-grab)
   '("h" . meow-left)
   '("H" . meow-left-expand)
   '("i" . meow-insert)
   '("I" . meow-open-above)
   '("j" . meow-next)
   '("J" . meow-next-expand)
   '("k" . meow-prev)
   '("K" . meow-prev-expand)
   '("l" . meow-right)
   '("L" . meow-right-expand)
   '("m" . meow-join)
   '("n" . meow-search)
   '("o" . meow-block)
   '("O" . meow-to-block)
   '("p" . meow-yank)
   '("q" . meow-quit)
   '("Q" . meow-goto-line)
   '("r" . meow-replace)
   '("R" . meow-swap-grab)
   '("s" . meow-kill)
   '("t" . meow-till)
   '("u" . meow-undo)
   '("U" . meow-undo-in-selection)
   '("v" . meow-visit)
   '("w" . meow-mark-word)
   '("W" . meow-mark-symbol)
   '("x" . meow-line)
   '("X" . meow-goto-line)
   '("y" . meow-save)
   '("Y" . meow-sync-grab)
   '("z" . meow-pop-selection)
   '("'" . repeat)
   '("<escape>" . ignore)))
(require 'meow)
(meow-setup)
(meow-global-mode 1)

;; Get rid of line hints (use built-in relative line numbering instead)
(setq meow-expand-hint-counts '(line . 0))
#+END_SRC

** Olivetti

#+BEGIN_SRC emacslisp
(use-package olivetti
  :ensure t)
#+END_SRC

* Needs Sorting

#+BEGIN_SRC emacs-lisp
(delete-selection-mode 1)
(setq blink-cursor-mode nil)
(column-number-mode 1)
#+END_SRC
